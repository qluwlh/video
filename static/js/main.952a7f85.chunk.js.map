{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["m3u8Parser","require","muxjs","m3u8Urls","static","mp4Urls","getTs$","url","defer","axios","get","responseType","pipe","map","item","data","retry","App","useState","loaded","setLoaded","m3u8","setM3u8","mp4","setMp4","transmuxer","useMemo","Transmuxer","mediaSource","MediaSource","sourceBufferRef","useRef","videoRef","useEffect","current","src","URL","createObjectURL","updateend","endOfStream","play","appendSegment","a","revokeObjectURL","addSourceBuffer","on","segment","console","log","Uint8Array","initSegment","byteLength","set","tools","inspect","addEventListener","appendBuffer","task","m3u8File","tss","host","match","parser","Parser","push","end","manifest","segments","uri","format","of","mergeMap","items","forkJoin","catchError","err","error","message","subscribe","next","forEach","element","flush","complete","className","name","id","onChange","e","target","value","Object","entries","key","onClick","retryWhen","getM3U8$","disabled","width","height","controls","ref","pause","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.952a7f85.chunk.js","sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react'\nimport './App.css'\nimport axios from 'axios'\nimport { of, defer, forkJoin } from 'rxjs'\nimport { map, retry, catchError, retryWhen, mergeMap } from 'rxjs/operators'\nconst m3u8Parser = require('m3u8-parser')\nconst muxjs = require('mux.js')\n\nconst mime = `video/mp4; codecs=\"mp4a.40.2,avc1.64001f\"`\n\nconst m3u8Urls = {\n  static: 'https://static.uskid.com/playback/20200523/qn5w3mn75/2_6gr4jM07dBixDv4D.m3u8',\n  'oss-accelerate':\n    'https://uskid.oss-accelerate.aliyuncs.com/playback/20200523/qn5w3mn75/2_6gr4jM07dBixDv4D.m3u8',\n  'oss-cn-beijing':\n    'https://uskid.oss-cn-beijing.aliyuncs.com/playback/20200523/qn5w3mn75/2_6gr4jM07dBixDv4D.m3u8',\n}\n\nconst mp4Urls = {\n  static: 'https://static.uskid.com/playback/20200523/qn5w3mn75/2_0_merge_av.mp4',\n  'oss-accelerate':\n    'https://uskid.oss-accelerate.aliyuncs.com/playback/20200523/qn5w3mn75/2_0_merge_av.mp4',\n  'oss-cn-beijing':\n    'https://uskid.oss-cn-beijing.aliyuncs.com/playback/20200523/qn5w3mn75/2_0_merge_av.mp4',\n}\nconst getM3U8$ = (url: string) =>\n  defer(() => axios.get(url)).pipe(\n    map((item: any) => item.data),\n    retryWhen((error: any) => error),\n    catchError((err) => of({ error: true, message: err.message }))\n  )\nconst getTs$ = (url: string) =>\n  defer(() => axios.get(url, { responseType: 'arraybuffer' })).pipe(\n    map((item: any) => item.data),\n    retry(10)\n  )\nconst format = (m3u8File: any, host) => {\n  const parser = new m3u8Parser.Parser()\n  parser.push(m3u8File)\n  parser.end()\n  const urls = parser.manifest.segments.map(({ uri }) => uri).map((uri) => `${host}/${uri}`)\n  return urls\n}\nconst getSegments$ = (tss) =>\n  of(tss).pipe(\n    mergeMap((items) =>\n      forkJoin(...items.map((item) => getTs$(item).pipe(map((item) => new Uint8Array(item)))))\n    ),\n    catchError((err) => of({ error: true, message: err.message }))\n  )\n\ntype M3u8UrlKeys = keyof typeof m3u8Urls | ''\ntype Mp4UrlKeys = keyof typeof mp4Urls | ''\nfunction App() {\n  const [loaded, setLoaded] = useState(false)\n  const [m3u8, setM3u8] = useState<M3u8UrlKeys>('')\n  const [mp4, setMp4] = useState<Mp4UrlKeys>('')\n  const play = () => videoRef.current?.play()\n  const pause = () => videoRef.current?.pause()\n  const transmuxer = useMemo(() => new muxjs.mp4.Transmuxer(), [])\n  const mediaSource = useMemo(() => new MediaSource(), [])\n  const sourceBufferRef = useRef<SourceBuffer>(null)\n  const videoRef = useRef<HTMLVideoElement>(null)\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.src = URL.createObjectURL(mediaSource)\n    }\n    const updateend = () => {\n      mediaSource.endOfStream()\n      videoRef.current?.play()\n      setLoaded(true)\n    }\n    const appendSegment = async () => {\n      if (videoRef.current) {\n        URL.revokeObjectURL(videoRef.current.src)\n      }\n      sourceBufferRef.current = mediaSource.addSourceBuffer(mime)\n      transmuxer.on('data', (segment) => {\n        console.log(`transmuxer.on(\"data\"`, segment)\n        let data = new Uint8Array(segment.initSegment.byteLength + segment.data.byteLength)\n        data.set(segment.initSegment, 0)\n        data.set(segment.data, segment.initSegment.byteLength)\n        console.log(muxjs.mp4.tools.inspect(data))\n        sourceBufferRef.current.addEventListener('updateend', updateend)\n        sourceBufferRef.current.appendBuffer(data)\n      })\n    }\n    mediaSource.addEventListener('sourceopen', appendSegment)\n  }, [])\n  const getMp4 = () => {\n    const url = mp4Urls[mp4]\n    getTs$(url)\n      .pipe(map((item) => new Uint8Array(item)))\n      .subscribe({\n        next: (data) => {\n          console.log(`mp4-url`, data)\n          transmuxer.push(data)\n          transmuxer.flush()\n        },\n      })\n  }\n  const task = (url) => (m3u8File) => {\n    const host = url.match(/(.*)\\/.*.m3u8$/)?.[1] ?? ''\n    getSegments$(format(m3u8File, host)).subscribe({\n      next: (data) => {\n        console.log(`segments$.subscribe-item`, data)\n        data.forEach((element) => transmuxer.push(element))\n        transmuxer.flush()\n      },\n      error: console.log,\n      complete: () => console.log('segments-done'),\n    })\n  }\n  const getM3U8 = () => {\n    const url = m3u8Urls[m3u8]\n    getM3U8$(url).subscribe({\n      next: task(url),\n      complete: () => console.log('data-done'),\n    })\n  }\n  return (\n    <div className={'root'}>\n      <div>\n        <div>\n          <select name={m3u8} id={m3u8} onChange={(e) => setM3u8(e.target.value as M3u8UrlKeys)}>\n            <option key={''} value={''}>\n              选择\n            </option>\n            {Object.entries(m3u8Urls).map(([key, value]) => (\n              <option key={key} value={key}>\n                {value}\n              </option>\n            ))}\n          </select>\n          <button onClick={getM3U8} disabled={!m3u8}>\n            获取m3u8\n          </button>\n        </div>\n        <div>\n          <select name={mp4} id={mp4} onChange={(e) => setMp4(e.target.value as Mp4UrlKeys)}>\n            <option key={''} value={''}>\n              选择\n            </option>\n            {Object.entries(mp4Urls).map(([key, value]) => (\n              <option key={key} value={key}>\n                {value}\n              </option>\n            ))}\n          </select>\n          <button onClick={getMp4} disabled={!mp4}>\n            获取mp4\n          </button>\n        </div>\n      </div>\n      <div>\n        <video id=\"video\" width={400} height={300} className=\"video\" controls ref={videoRef} />\n      </div>\n\n      {loaded && (\n        <div>\n          <button onClick={play}>播放</button>\n          <button onClick={pause}>暂停</button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}
{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["m3u8Parser","require","muxjs","testUrl","host","match","App","useState","loaded","setLoaded","transmuxer","useMemo","mp4","Transmuxer","mediaSource","MediaSource","sourceBufferRef","useRef","videoRef","tsUrlRef","useEffect","current","src","URL","createObjectURL","updateend","endOfStream","play","appendSegment","a","length","revokeObjectURL","addSourceBuffer","on","segment","console","log","data","Uint8Array","initSegment","byteLength","set","tools","inspect","addEventListener","appendBuffer","url","defer","axios","get","pipe","map","item","retryWhen","error","catchError","err","of","message","subscribe","next","m3u8File","tss","parser","Parser","push","end","manifest","segments","uri","format","mergeMap","items","forkJoin","responseType","retry","forEach","element","flush","complete","className","id","width","height","controls","ref","onClick","pause","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0119b21d.chunk.js","sourcesContent":["import { useEffect, useMemo, useRef, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { of, defer, forkJoin } from \"rxjs\";\nimport { map, retry, catchError, retryWhen, mergeMap } from \"rxjs/operators\";\nconst m3u8Parser = require(\"m3u8-parser\");\nconst muxjs = require(\"mux.js\");\n\nconst mime = `video/mp4; codecs=\"mp4a.40.2,avc1.64001f\"`;\nconst testUrl =\n  // \"https://static.uskid.com/playback/20200523/qn5w3mn75/2_6gr4jM07dBixDv4D.m3u8\";\n  // \"https://uskid.oss-cn-beijing.aliyuncs.com/playback/20200523/qn5w3mn75/2_6gr4jM07dBixDv4D.m3u8\";\n  \"https://uskid.oss-accelerate.aliyuncs.com/playback/20200523/qn5w3mn75/2_6gr4jM07dBixDv4D.m3u8\";\n// \"https://static.uskid.com/playback/20200711/j3gdn354k/2_LTXKZ36xE7rhCZG9.m3u8\";\n\n// eslint-disable-next-line\nconst mp4Urls = {\n  static:\n    \"https://static.uskid.com/playback/20200523/qn5w3mn75/2_0_merge_av.mp4\",\n  \"oss-accelerate\":\n    \"https://uskid.oss-accelerate.aliyuncs.com/playback/20200523/qn5w3mn75/2_0_merge_av.mp4\",\n  \"oss-cn-beijing\":\n    \"https://uskid.oss-cn-beijing.aliyuncs.com/playback/20200523/qn5w3mn75/2_0_merge_av.mp4\",\n};\nconst host = testUrl.match(/(.*)\\/.*.m3u8$/)?.[1] ?? \"\";\nconst getM3U8$ = (url: string) =>\n  defer(() => axios.get(url)).pipe(\n    map((item: any) => item.data),\n    retryWhen((error: any) => error),\n    catchError((err) => of({ error: true, message: err.message }))\n  );\nconst getTs$ = (url: string) =>\n  defer(() => axios.get(url, { responseType: \"arraybuffer\" })).pipe(\n    map((item: any) => item.data),\n    retry(10)\n  );\nconst format = (m3u8File: any) => {\n  const parser = new m3u8Parser.Parser();\n  parser.push(m3u8File);\n  parser.end();\n  const urls = parser.manifest.segments\n    .map(({ uri }) => uri)\n    .map((uri) => `${host}/${uri}`);\n  return urls;\n};\nfunction App() {\n  const [loaded, setLoaded] = useState(false);\n  const play = () => videoRef.current?.play();\n  const pause = () => videoRef.current?.pause();\n  const transmuxer = useMemo(() => new muxjs.mp4.Transmuxer(), []);\n  const mediaSource = useMemo(() => new MediaSource(), []);\n  const sourceBufferRef = useRef<any>();\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const tsUrlRef = useRef<string[]>([]);\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.src = URL.createObjectURL(mediaSource);\n    }\n    const updateend = () => {\n      mediaSource.endOfStream();\n      videoRef.current?.play();\n      setLoaded(true);\n    };\n    const appendSegment = async () => {\n      if (tsUrlRef.current.length <= 0) {\n        return;\n      }\n      if (videoRef.current) {\n        URL.revokeObjectURL(videoRef.current.src);\n      }\n      sourceBufferRef.current = mediaSource.addSourceBuffer(mime);\n      transmuxer.on(\"data\", (segment) => {\n        console.log(`transmuxer.on(\"data\"`, segment);\n        let data = new Uint8Array(\n          segment.initSegment.byteLength + segment.data.byteLength\n        );\n        data.set(segment.initSegment, 0);\n        data.set(segment.data, segment.initSegment.byteLength);\n        console.log(muxjs.mp4.tools.inspect(data));\n        sourceBufferRef.current.addEventListener(\"updateend\", updateend);\n        sourceBufferRef.current.appendBuffer(data);\n      });\n    };\n    mediaSource.addEventListener(\"sourceopen\", appendSegment);\n    const task = (m3u8File) => {\n      const tss = format(m3u8File);\n      tsUrlRef.current.push(...tss);\n      const segments$ = of(tss).pipe(\n        mergeMap((items) =>\n          forkJoin(\n            ...items.map((item) =>\n              getTs$(item).pipe(map((item) => new Uint8Array(item)))\n            )\n          )\n        ),\n        catchError((err) => of({ error: true, message: err.message }))\n      );\n      segments$.subscribe({\n        next: (data) => {\n          console.log(`segments$.subscribe-item`, data);\n          data.forEach((element) => transmuxer.push(element));\n          transmuxer.flush();\n        },\n        error: console.log,\n        complete: () => console.log(\"segments-done\"),\n      });\n    };\n    // getTs$(mp4Urls[\"oss-accelerate\"])\n    //   .pipe(map((item) => new Uint8Array(item)))\n    //   .subscribe({\n    //     next: (data) => {\n    //       console.log(`mp4-url`, data);\n    //       transmuxer.push(data);\n    //       transmuxer.flush();\n    //     },\n    //   });\n    const data$ = getM3U8$(testUrl);\n    data$.subscribe({\n      next: task,\n      complete: () => console.log(\"data-done\"),\n    });\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <div className=\"App\">\n      {!loaded && \"loading\"}\n      <video\n        id=\"video\"\n        width={400}\n        height={300}\n        className=\"video\"\n        controls\n        ref={videoRef}\n      />\n      {loaded && (\n        <div>\n          <button onClick={play}>播放</button>\n          <button onClick={pause}>暂停</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}